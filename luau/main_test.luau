local main = require "./main"

local nstring = main.nstring
local stringn = main.stringn
local nock = main.nock

local log = true

local function dprint(...: string)
	if log then print(...) end
end

type Test = {
	subject: string,
	formula: string,
	output: string?,
	err: string?,
}

local tests: { Test } = {
	{
		subject = "1",
		formula = "2",
		err = "*a -> *a",
	},

	-- distribution
	{
		subject = "[[1 2] [3 4]]",
		formula = "[[0 3] [4 0 5]]",
		output = "[[3 4] 3]",
	},

	-- opcode 0
	{
		subject = "[[4 5] [6 14 15]]",
		formula = "[0 1]",
		output = "[[4 5] [6 [14 15]]]",
	},
	{
		subject = "[[4 5] [6 14 15]]",
		formula = "[0 2]",
		output = "[4 5]",
	},
	{
		subject = "[[4 5] [6 14 15]]",
		formula = "[0 3]",
		output = "[6 [14 15]]",
	},
	{
		subject = "[[4 5] [6 14 15]]",
		formula = "[0 4]",
		output = "4",
	},
	{
		subject = "[[4 5] [6 14 15]]",
		formula = "[0 5]",
		output = "5",
	},
	{
		subject = "[[4 5] [6 14 15]]",
		formula = "[0 6]",
		output = "6",
	},
	{
		subject = "[[4 5] [6 14 15]]",
		formula = "[0 7]",
		output = "[14 15]",
	},
	{
		subject = "[[4 5] [6 14 15]]",
		formula = "[0 10]",
		err = "/[2 n] -> /[2 /[1 n]] -> /[2 n]",
	},
	{
		subject = "[[4 5] [6 14 15]]",
		formula = "[0 14]",
		output = "14",
	},
	{
		subject = "[[4 5] [6 14 15]]",
		formula = "[0 15]",
		output = "15",
	},
	{
		subject = "[50 51]",
		formula = "[0 [0 1]]",
		err = "/a -> /a",
	},

	-- opcode 1
	{
		subject = "0",
		formula = "[1 3]",
		output = "3",
	},
	{
		subject = "999",
		formula = "[1 0]",
		output = "0",
	},
	{
		subject = "42",
		formula = "[1 153 218]",
		output = "[153 218]",
	},
	{
		subject = "[[1 2] [3 4]]",
		formula = "[1 7]",
		output = "7",
	},
	{
		subject = "[[1 2] [3 4]]",
		formula = "[1 [7 8 9]]",
		output = "[7 [8 9]]",
	},

	-- opcode 2
	{
		subject = "77",
		formula = "[2 [1 42] [1 1 153 218]]",
		output = "[153 218]",
	},
	{
		subject = "0",
		formula = "[2 [1 0] [1 1 55]]",
		output = "55",
	},
	{
		subject = "[1 2]",
		formula = "[2 [0 2] [1 [0 1]]]",
		output = "1",
	},

	-- opcode 3
	{
		subject = "0",
		formula = "[3 [1 [1 2]]]",
		output = "0",
	},
	{
		subject = "0",
		formula = "[3 [1 56]]",
		output = "1",
	},
	{
		subject = "[[1 2] [3 4]]",
		formula = "[3 0 1]",
		output = "0",
	},
	{
		subject = "[[1 2] [3 4]]",
		formula = "[3 0 4]",
		output = "1",
	},

	-- opcode 4
	{
		subject = "0",
		formula = "[4 [1 2]]",
		output = "3",
	},
	{
		subject = "0",
		formula = "[4 [1 56]]",
		output = "57",
	},
	{
		subject = "2",
		formula = "[4 [0 1]]",
		output = "3",
	},
	{
		subject = "56",
		formula = "[4 [0 1]]",
		output = "57",
	},
	{
		subject = "5",
		formula = "[4 [3 0 1]]",
		output = "2",
	},
	{
		subject = "0",
		formula = "[4 [1 [5 5]]]",
		err = "+[a b] -> +[a b]",
	},

	-- opcode 5
	{
		subject = "77",
		formula = "[5 [1 9] [1 9]]",
		output = "0",
	},
	{
		subject = "77",
		formula = "[5 [1 8] [1 9]]",
		output = "1",
	},
	{
		subject = "77",
		formula = "[5 [1 8] [1 [8 8]]]",
		output = "1",
	},
	{
		subject = "77",
		formula = "[5 [1 [8 8]] [1 [8 8]]]",
		output = "0",
	},
	{
		subject = "[[1 2] [1 2]]",
		formula = "[5 [0 2] [0 3]]",
		output = "0",
	},
	{
		subject = "[[1 2] [3 4]]",
		formula = "[5 [0 2] [0 3]]",
		output = "1",
	},
	{
		subject = "[[1 2] [99 99]]",
		formula = "[5 [0 5] [4 0 4]]",
		output = "0",
	},

	-- opcode 6
	{
		subject = "42",
		formula = "[6 [1 0] [4 0 1] [1 233]]",
		output = "43",
	},
	{
		subject = "42",
		formula = "[6 [1 1] [4 0 1] [1 233]]",
		output = "233",
	},
	{
		subject = "42",
		formula = "[6 [1 0] [1 232] [1 233]]",
		output = "232",
	},
	{
		subject = "42",
		formula = "[6 [1 1] [1 232] [1 233]]",
		output = "233",
	},
	{
		subject = "42",
		formula = "[6 [1 2] [1 232] [1 233]]",
		err = "/[2 n] -> /[2 /[1 n]] -> /[2 n]",
	},

	-- opcode 7
	{
		subject = "42",
		formula = "[7 [4 0 1] [4 0 1]]",
		output = "44",
	},
	{
		subject = "42",
		formula = "[7 [0 1] [4 0 1]]",
		output = "43",
	},
	{
		subject = "42",
		formula = "[7 [0 1] [0 1]]", -- lmao
		output = "42",
	},
	{
		subject = "42",
		formula = "[7 [7 [7 [7 [4 0 1] [4 0 1]] 7 [4 0 1] [4 0 1]] [7 [7 [4 0 1] [4 0 1]] 7 [4 0 1] [4 0 1]]] 7 [7 [7 [4 0 1] [4 0 1]] 7 [4 0 1] [4 0 1]] 7 [7 [4 0 1] [4 0 1]] 7 [4 0 1] [4 0 1]]", -- am I a genius or wat
		output = "58",
	},

	-- opcode 8
	{
		subject = "42",
		formula = "[8 [4 0 1] [0 1]]",
		output = "[43 42]",
	},
	{
		subject = "42",
		formula = "[8 [4 0 1] [4 0 3]]",
		output = "43",
	},

	-- other
	{
		subject = "42",
		formula = "[[1 0] [0 1]]",
		output = "[0 42]",
	},
	{
		subject = "42",
		formula = "[2 [[1 0] [0 1]] [1 [0 1]]]",
		output = "[0 42]",
	},
	{
		subject = "42",
		formula = "[7 [[1 0] [0 1]] [0 1]]",
		output = "[0 42]",
	},
	{
		subject = "42",
		formula = "[8 [1 0] [0 1]]",
		output = "[0 42]",
	},

	-- holy grail (decrement)
	{
		subject = "1",
		formula = "[8 [1 0] [8 [1 6 [5 [0 7] 4 0 6] [0 6] 9 2 [0 2] [4 0 6] 0 7] 9 2 0 1]]",
		output = "0",
	}, -- i tried this with s = 0, and it crashed. my entire. ship.

	-- add
	{
		subject = "[7 8]",
		formula = "[8 [[1 [1 [6 [5 [0 13] [0 14]] [0 12] [9 2 [[0 2] [[4 [0 12]] [0 13]] [[4 [0 14]] [0 15]]]]]] [1 0] [0 1]] [1 0]] [8 [9 2 [0 2]] [9 2 [[0 4] [0 7] [0 5]]]]]",
		output = "15",
	},

	-- subtract
	{
		subject = "[8 7]",
		formula = "[8 [1 0] [8 [1 [6 [5 [0 14] [0 15]] [0 6] [9 2 [0 2] [4 0 6] [0 14] [4 0 15]]]] [9 2 [0 1]]]]",
		output = "1",
	},

	-- "once you can add, you can multiply..."
	{
		subject = "[8 7]",
		formula = "[8 [[[1 [[1 [8 [9 5 [0 15]] [6 [5 [0 29] [0 61]] [0 60] [9 2 [[0 6] [0 14] [[[9 2 [[0 4] [[[0 60] [0 28]] [0 5]]]] [4 [0 61]]] [0 31]]]]]]] [[[1 0] [1 0]] [0 1]]]] [1 [1 [6 [5 [0 13] [0 14]] [0 12] [9 2 [[0 2] [[4 [0 12]] [0 13]] [[4 [0 14]] [0 15]]]]]] [1 0] [0 1]]] [1 0]] [8 [9 4 [0 2]] [9 2 [[0 4] [0 7] [0 5]]]]]",
		output = "56",
	},
	-- "...and once you can multiply, you can basically do anything"

	-- 1000 lines of code before an isEven
	{
		subject = "5",
		formula = "[8 [1 0] [8 [1 [6 [5 [0 7] [0 6]] [1 0] [6 [5 [0 7] [4 0 6]] [1 1] [9 2 [[0 2] [4 4 0 6] [0 7]]]]]] [9 2 0 1]]]",
		output = "1",
	},
	{
		subject = "6",
		formula = "[8 [1 0] [8 [1 [6 [5 [0 7] [0 6]] [1 0] [6 [5 [0 7] [4 0 6]] [1 1] [9 2 [[0 2] [4 4 0 6] [0 7]]]]]] [9 2 0 1]]]",
		output = "0",
	},

	-- THIS ONE IS WILD
	{
		subject = "4",
		formula = "[8 [[[[[[[[[[1 [[[1 [8 [9 513 [0 7]] [6 [5 [0 14] [1 0]] [9 13 [0 1]] [9 4 [[0 4] [0 14] [0 5]]]]]] [1 [6 [5 [9 4 [[0 4] [0 14] [0 5]]] [1 0]] [0 14] [9 13 [[0 2] [0 6] [4 [4 [0 14]]] [0 15]]]]]] [0 1]]] [1 [[[1 [8 [9 257 [0 15]] [8 [9 17 [0 31]] [8 [9 65 [0 63]] [8 [9 129 [0 127]] [6 [9 4 [[0 28] [[[1 3] [0 126]] [0 29]]]] [1 1] [6 [9 2 [[0 4] [[0 126] [0 5]]]] [9 125 [[0 2] [0 6] [0 14] [0 30] [0 62] [0 126] [[0 508] [9 2 [[0 60] [9 2 [[0 60] [0 126] [0 61]]] [0 61]]]] [0 255]]] [1 1]]]]]]]] [1 [6 [9 2 [[0 12] [0 254] [0 13]]] [[0 254] [1 1]] [6 [5 [4 [4 [0 508]]] [0 126]] [1 0] [9 125 [[0 2] [0 6] [0 14] [0 30] [0 62] [0 126] [[4 [0 508]] [9 2 [[0 60] [0 509] [0 61]]]] [0 255]]]]]]] [[[1 2] [1 0]] [0 1]]]]] [1 [[1 [6 [5 [4 [0 14]] [0 6]] [0 14] [9 2 [[0 2] [[0 6] [[4 [0 14]] [0 15]]]]]]] [[1 0] [0 1]]]]] [1 [[1 [6 [5 [0 28] [0 6]] [1 0] [6 [5 [0 29] [0 6]] [1 1] [9 2 [[0 2] [[0 6] [[[4 [4 [0 28]]] [4 [4 [0 29]]]] [0 15]]]]]]]] [[[1 0] [1 1]] [0 1]]]]] [1 [[1 [8 [9 33 [0 7]] [6 [9 4 [[0 4] [0 28] [0 5]]] [6 [9 4 [[0 4] [0 29] [0 5]]] [1 0] [1 1]] [1 1]]]] [0 1]]]] [1 [[[1 [8 [9 9 [0 15]] [8 [9 17 [0 31]] [8 [9 129 [0 63]] [6 [5 [0 62] [1 0]] [1 1] [6 [5 [0 62] [1 1]] [1 1] [6 [5 [0 62] [1 2]] [1 0] [6 [5 [0 62] [1 3]] [1 0] [6 [9 2 [[0 4] [0 62] [0 5]]] [1 1] [9 61 [0 1]]]]]]]]]]] [1 [6 [5 [9 2 [[0 28] [[0 126] [0 29]]]] [0 62]] [1 1] [6 [5 [4 [0 253]] [0 62]] [6 [9 4 [[0 12] [[[9 2 [[0 28] [[0 126] [0 29]]]] [0 62]] [0 13]]]] [1 0] [9 61 [[0 2] [0 6] [0 14] [0 30] [0 62] [[4 [0 252]] [0 253]] [0 127]]]] [6 [9 4 [[0 12] [[[9 2 [[0 28] [[0 126] [0 29]]]] [0 62]] [0 13]]]] [9 61 [[0 2] [0 6] [0 14] [0 30] [0 62] [[1 2] [4 [0 253]]] [0 127]]] [9 61 [[0 2] [0 6] [0 14] [0 30] [0 62] [[4 [0 252]] [0 253]] [0 127]]]]]]]] [[[1 2] [1 2]] [0 1]]]]] [1 [[[1 [6 [5 [0 14] [0 15]] [1 1] [9 5 [[0 2] [[0 6] [[0 6] [0 15]]]]]]] [1 [6 [5 [4 [0 28]] [0 13]] [1 1] [6 [5 [4 [0 29]] [0 12]] [1 0] [9 5 [[0 2] [[0 6] [[[4 [0 28]] [4 [0 29]]] [0 15]]]]]]]]] [[[1 0] [1 0]] [0 1]]]]] [1 [[1 [8 [9 5 [0 15]] [6 [5 [0 29] [0 61]] [0 60] [9 2 [[0 6] [0 14] [[[9 2 [[0 4] [[[0 60] [0 28]] [0 5]]]] [4 [0 61]]] [0 31]]]]]]] [[[1 0] [1 0]] [0 1]]]]] [1 [1 [6 [5 [0 13] [0 14]] [0 12] [9 2 [[0 2] [[4 [0 12]] [0 13]] [[4 [0 14]] [0 15]]]]]] [1 0] [0 1]]] [1 0]] [8 [9 512 [0 2]] [9 4 [[0 4] [0 7] [0 5]]]]]",
		output = "[[2 2] 1]",
	},
	{
		subject = "32",
		formula = "[8 [[[[[[[[[[1 [[[1 [8 [9 513 [0 7]] [6 [5 [0 14] [1 0]] [9 13 [0 1]] [9 4 [[0 4] [0 14] [0 5]]]]]] [1 [6 [5 [9 4 [[0 4] [0 14] [0 5]]] [1 0]] [0 14] [9 13 [[0 2] [0 6] [4 [4 [0 14]]] [0 15]]]]]] [0 1]]] [1 [[[1 [8 [9 257 [0 15]] [8 [9 17 [0 31]] [8 [9 65 [0 63]] [8 [9 129 [0 127]] [6 [9 4 [[0 28] [[[1 3] [0 126]] [0 29]]]] [1 1] [6 [9 2 [[0 4] [[0 126] [0 5]]]] [9 125 [[0 2] [0 6] [0 14] [0 30] [0 62] [0 126] [[0 508] [9 2 [[0 60] [9 2 [[0 60] [0 126] [0 61]]] [0 61]]]] [0 255]]] [1 1]]]]]]]] [1 [6 [9 2 [[0 12] [0 254] [0 13]]] [[0 254] [1 1]] [6 [5 [4 [4 [0 508]]] [0 126]] [1 0] [9 125 [[0 2] [0 6] [0 14] [0 30] [0 62] [0 126] [[4 [0 508]] [9 2 [[0 60] [0 509] [0 61]]]] [0 255]]]]]]] [[[1 2] [1 0]] [0 1]]]]] [1 [[1 [6 [5 [4 [0 14]] [0 6]] [0 14] [9 2 [[0 2] [[0 6] [[4 [0 14]] [0 15]]]]]]] [[1 0] [0 1]]]]] [1 [[1 [6 [5 [0 28] [0 6]] [1 0] [6 [5 [0 29] [0 6]] [1 1] [9 2 [[0 2] [[0 6] [[[4 [4 [0 28]]] [4 [4 [0 29]]]] [0 15]]]]]]]] [[[1 0] [1 1]] [0 1]]]]] [1 [[1 [8 [9 33 [0 7]] [6 [9 4 [[0 4] [0 28] [0 5]]] [6 [9 4 [[0 4] [0 29] [0 5]]] [1 0] [1 1]] [1 1]]]] [0 1]]]] [1 [[[1 [8 [9 9 [0 15]] [8 [9 17 [0 31]] [8 [9 129 [0 63]] [6 [5 [0 62] [1 0]] [1 1] [6 [5 [0 62] [1 1]] [1 1] [6 [5 [0 62] [1 2]] [1 0] [6 [5 [0 62] [1 3]] [1 0] [6 [9 2 [[0 4] [0 62] [0 5]]] [1 1] [9 61 [0 1]]]]]]]]]]] [1 [6 [5 [9 2 [[0 28] [[0 126] [0 29]]]] [0 62]] [1 1] [6 [5 [4 [0 253]] [0 62]] [6 [9 4 [[0 12] [[[9 2 [[0 28] [[0 126] [0 29]]]] [0 62]] [0 13]]]] [1 0] [9 61 [[0 2] [0 6] [0 14] [0 30] [0 62] [[4 [0 252]] [0 253]] [0 127]]]] [6 [9 4 [[0 12] [[[9 2 [[0 28] [[0 126] [0 29]]]] [0 62]] [0 13]]]] [9 61 [[0 2] [0 6] [0 14] [0 30] [0 62] [[1 2] [4 [0 253]]] [0 127]]] [9 61 [[0 2] [0 6] [0 14] [0 30] [0 62] [[4 [0 252]] [0 253]] [0 127]]]]]]]] [[[1 2] [1 2]] [0 1]]]]] [1 [[[1 [6 [5 [0 14] [0 15]] [1 1] [9 5 [[0 2] [[0 6] [[0 6] [0 15]]]]]]] [1 [6 [5 [4 [0 28]] [0 13]] [1 1] [6 [5 [4 [0 29]] [0 12]] [1 0] [9 5 [[0 2] [[0 6] [[[4 [0 28]] [4 [0 29]]] [0 15]]]]]]]]] [[[1 0] [1 0]] [0 1]]]]] [1 [[1 [8 [9 5 [0 15]] [6 [5 [0 29] [0 61]] [0 60] [9 2 [[0 6] [0 14] [[[9 2 [[0 4] [[[0 60] [0 28]] [0 5]]]] [4 [0 61]]] [0 31]]]]]]] [[[1 0] [1 0]] [0 1]]]]] [1 [1 [6 [5 [0 13] [0 14]] [0 12] [9 2 [[0 2] [[4 [0 12]] [0 13]] [[4 [0 14]] [0 15]]]]]] [1 0] [0 1]]] [1 0]] [8 [9 512 [0 2]] [9 4 [[0 4] [0 7] [0 5]]]]]",
		output = "[[3 29] 1]",
	},
}

for i, test in tests do
	dprint(`TEST {i}`)

	local subject = stringn(test.subject)
	if subject.fail then
		dprint "FAIL"
		dprint("subject stringn", subject.err)
		return
	end

	local formula = stringn(test.formula)
	if formula.fail then
		dprint "FAIL"
		dprint("formula stringn", formula.err)
		return
	end

	local res = nock(subject.value, formula.value)
	if res.fail and test.err then
		if test.err ~= res.err then
			dprint "FAIL"
			dprint("expected", test.err)
			dprint("got     ", res.err)
			return
		end
	elseif not res.fail and test.output then
		local out = nstring(res.value)

		if test.output ~= out then
			dprint "FAIL"
			dprint("expected", test.output)
			dprint("got     ", out)
			return
		end
	else
		dprint "FAIL"

		if test.output and res.fail then
			dprint("expected output", test.output)
			dprint("got failure    ", res.err)
		elseif test.err and not res.fail then
			dprint("expected failure", test.err)
			dprint("got output      ", nstring(res.value))
		else
			dprint "invalid test"
		end
		return
	end

	dprint(test.output or test.err or "<none>")
	dprint "PASS\n"
end
